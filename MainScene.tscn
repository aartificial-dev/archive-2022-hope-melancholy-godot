[gd_scene load_steps=8 format=2]

[ext_resource path="res://GUI/BuildInfo.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scenes/TestLevel.tscn" type="PackedScene" id=2]
[ext_resource path="res://Fonts/earthorbiter.ttf" type="DynamicFontData" id=3]
[ext_resource path="res://GUI/LoadingScreen/LoadingScreen.tscn" type="PackedScene" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float vignette_amount = 1.0;
uniform float chroma_amount = 1.0;
uniform float grain_amount = 16.0;


vec4 texturePointSmooth(sampler2D tex, vec2 uv) {
	vec2 size = vec2(textureSize(tex, 0));
	vec2 pixel = vec2(1.0) / size;
	uv -= pixel * vec2(0.5);
	vec2 uv_pixels = uv * size;
	vec2 delta_pixel = fract(uv_pixels) - vec2(0.5);
	vec2 ddxy = fwidth(uv_pixels);
	vec2 mip = log2(ddxy) - 0.5;
	return textureLod(tex, uv + (clamp(delta_pixel / ddxy, 0.0, 1.0) - delta_pixel) * pixel, min(mip.x, mip.y));
}

vec4 chromatic(sampler2D tex, vec2 uv) {
	vec4 newCol = vec4(0., 0., 0., 1.);

	float dis = distance(uv , vec2(0.5)) * chroma_amount;

	newCol.r = texturePointSmooth(tex, uv + (dis*0.005)).r;
	newCol.g = texturePointSmooth(tex, uv).g;
	newCol.b = texturePointSmooth(tex, uv - (dis*0.005)).b;

	return newCol;
}

vec4 vignette(vec2 suv) {  
	float vig = 1.0 - length(suv - vec2(0.5));
	vig = pow(abs(vig), vignette_amount);
	return vec4(vig, vig, vig, 1.0);
}

vec4 grain(vec2 suv, float time) {
	vec2 uv = suv;
	
	float x = (uv.x + 4.0 ) * (uv.y + 4.0 ) * (time * 10.0);
	vec4 grain = vec4(mod((mod(x, 13.0) + 1.0) * (mod(x, 123.0) + 1.0), 0.01)-0.005) * grain_amount;

	grain = 1.0 - grain;
	return grain;
}

void fragment() {  
	vec4 col = chromatic(TEXTURE, UV);
	col *= vignette(UV);
	col *= grain(SCREEN_UV, TIME);
	
	COLOR = col;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/vignette_amount = 0.5
shader_param/chroma_amount = 0.5
shader_param/grain_amount = 0.0

[sub_resource type="DynamicFont" id=3]
size = 50
font_data = ExtResource( 3 )

[node name="ViewportContainer" type="ViewportContainer"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
stretch = true
stretch_shrink = 4
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 320, 180 )
handle_input_locally = false
render_target_update_mode = 3
audio_listener_enable_2d = true
physics_object_picking = true

[node name="Node2D" parent="Viewport" instance=ExtResource( 2 )]

[node name="LoadingScreen" type="CanvasLayer" parent="."]

[node name="LoadingScreen" parent="LoadingScreen" instance=ExtResource( 4 )]
visible = false
value = 40

[node name="BuildInfo" type="CanvasLayer" parent="."]
layer = 7
scale = Vector2( 3, 3 )
transform = Transform2D( 3, 0, 0, 3, 0, 0 )

[node name="BuildInfo" parent="BuildInfo" instance=ExtResource( 1 )]
visible = false
anchor_top = 1.0
anchor_bottom = 1.0
margin_top = -660.0
margin_bottom = -480.0
grow_vertical = 0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="LogoScreen" type="CanvasLayer" parent="."]
layer = 15

[node name="Logo" type="Control" parent="LogoScreen"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="LogoScreen/Logo"]
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 1 )

[node name="Label" type="Label" parent="LogoScreen/Logo"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -278.5
margin_top = -25.0
margin_right = 278.5
margin_bottom = 25.0
custom_fonts/font = SubResource( 3 )
text = "h.o.p.e. melancholy"
align = 1
valign = 1
