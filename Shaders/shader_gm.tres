[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float vignette_amount = 1.0;
uniform float chroma_amount = 1.0;
uniform float grain_amount = 16.0;


vec4 texturePointSmooth(sampler2D tex, vec2 uv) {
	vec2 size = vec2(textureSize(tex, 0));
	vec2 pixel = vec2(1.0) / size;
	uv -= pixel * vec2(0.5);
	vec2 uv_pixels = uv * size;
	vec2 delta_pixel = fract(uv_pixels) - vec2(0.5);
	vec2 ddxy = fwidth(uv_pixels);
	vec2 mip = log2(ddxy) - 0.5;
	return textureLod(tex, uv + (clamp(delta_pixel / ddxy, 0.0, 1.0) - delta_pixel) * pixel, min(mip.x, mip.y));
}

vec4 chromatic(sampler2D tex, vec2 uv) {
	vec4 newCol = vec4(0., 0., 0., 1.);

	float dis = distance(uv , vec2(0.5)) * chroma_amount;

	newCol.r = texturePointSmooth(tex, uv + (dis*0.005)).r;
	newCol.g = texturePointSmooth(tex, uv).g;
	newCol.b = texturePointSmooth(tex, uv - (dis*0.005)).b;

	return newCol;
}

vec4 vignette(vec2 suv) {  
	float vig = 1.0 - length(suv - vec2(0.5));
	vig = pow(abs(vig), vignette_amount);
	return vec4(vig, vig, vig, 1.0);
}

vec4 grain(vec2 suv, float time) {
	vec2 uv = suv;
	
	float x = (uv.x + 4.0 ) * (uv.y + 4.0 ) * (time * 10.0);
	vec4 grain = vec4(mod((mod(x, 13.0) + 1.0) * (mod(x, 123.0) + 1.0), 0.01)-0.005) * grain_amount;

	grain = 1.0 - grain;
	return grain;
}

void fragment() {  
	vec4 col = chromatic(TEXTURE, UV);
	col *= vignette(UV);
	//col *= grain(SCREEN_UV, TIME);
	
	COLOR = col;
}
"

[resource]
shader = SubResource( 1 )
shader_param/vignette_amount = 0.5
shader_param/chroma_amount = 2.0
shader_param/grain_amount = 16.0
